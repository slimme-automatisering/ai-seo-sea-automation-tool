// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Basis modellen
model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  password            String
  name                String?
  role                Role      @default(USER)
  emailVerified       Boolean   @default(false)
  verificationToken   String?   @unique
  verificationExpires DateTime?
  resetPasswordToken  String?   @unique
  resetPasswordExpires DateTime?
  twoFactorSecret     String?
  twoFactorEnabled    Boolean   @default(false)
  backupCodes         String[]  @default([])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  websites            Website[]
  organization        Organization? @relation(fields: [orgId], references: [id])
  orgId               String?
  aiCredits           Int       @default(0)
  sessions            Session[]

  @@index([email])
  @@index([role])
  @@index([orgId])
}

model Session {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  token        String   @unique
  userAgent    String?
  ipAddress    String?
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model Organization {
  id            String    @id @default(cuid())
  name          String
  plan          Plan      @default(INDIVIDUAL)
  users         User[]
  websites      Website[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  apiKeys       ApiKey[]

  @@index([plan])
}

model Website {
  id              String    @id @default(cuid())
  url             String
  name            String
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  organization    Organization @relation(fields: [orgId], references: [id])
  orgId           String
  campaigns       Campaign[]
  keywords        Keyword[]
  seoAudits       SeoAudit[]
  contentItems    ContentItem[]
  competitors     Competitor[]
  analytics       Analytics[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([orgId])
  @@index([url])
}

// SEO modellen
model SeoAudit {
  id              String    @id @default(cuid())
  website         Website   @relation(fields: [websiteId], references: [id])
  websiteId       String
  score           Int
  issues          Json      // Opgeslagen als JSON met gevonden problemen
  recommendations Json      // Opgeslagen als JSON met aanbevelingen
  metrics         Json      // PageSpeed scores, mobiele vriendelijkheid, etc.
  createdAt       DateTime  @default(now())

  @@index([websiteId])
  @@index([score])
  @@index([createdAt])
}

model ContentItem {
  id              String    @id @default(cuid())
  website         Website   @relation(fields: [websiteId], references: [id])
  websiteId       String
  type            ContentType
  title           String
  content         String    @db.Text
  metaTitle       String?
  metaDescription String?
  keywords        String[]
  url             String
  aiGenerated     Boolean   @default(false)
  qualityScore    Float?    // SEO kwaliteitsscore
  readabilityScore Float?   // Leesbaarheid score
  status          ContentStatus @default(DRAFT)
  publishDate     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([websiteId])
  @@index([type])
  @@index([url])
  @@index([keywords])
  @@index([aiGenerated])
}

model Campaign {
  id              String    @id @default(cuid())
  name            String
  type            CampaignType
  status          Status    @default(ACTIVE)
  budget          Float
  website         Website   @relation(fields: [websiteId], references: [id])
  websiteId       String
  keywords        Keyword[]
  ads             Ad[]
  bidStrategy     BidStrategy
  targetCPA       Float?
  startDate       DateTime
  endDate         DateTime?
  metrics         CampaignMetrics[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([websiteId])
  @@index([type])
  @@index([status])
  @@index([startDate])
}

model Ad {
  id              String    @id @default(cuid())
  campaign        Campaign  @relation(fields: [campaignId], references: [id])
  campaignId      String
  type            AdType
  headline        String
  description     String
  finalUrl        String
  status          Status    @default(ACTIVE)
  metrics         AdMetrics[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([campaignId])
  @@index([type])
  @@index([status])
}

model Keyword {
  id              String    @id @default(cuid())
  word            String
  website         Website   @relation(fields: [websiteId], references: [id])
  websiteId       String
  campaigns       Campaign[]
  type            KeywordType @default(BROAD)
  metrics         KeywordMetrics[]
  competition     Float?    // 0-1 schaal
  searchVolume    Int?
  suggestedBid    Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([websiteId])
  @@index([word])
  @@index([type])
  @@index([competition])
  @@index([searchVolume])
}

// Analytics modellen
model Analytics {
  id              String    @id @default(cuid())
  website         Website   @relation(fields: [websiteId], references: [id])
  websiteId       String
  pageViews       Int
  uniqueVisitors  Int
  bounceRate      Float
  avgTimeOnSite   Float
  date            DateTime  @default(now())

  @@index([websiteId])
  @@index([date])
  @@index([pageViews])
  @@index([bounceRate])
}

model KeywordMetrics {
  id              String    @id @default(cuid())
  keyword         Keyword   @relation(fields: [keywordId], references: [id])
  keywordId       String
  position        Int?
  clicks          Int       @default(0)
  impressions     Int       @default(0)
  ctr             Float?    // Click-through rate
  averageCpc      Float?    // Gemiddelde kosten per klik
  spend           Float     @default(0)
  conversions     Int       @default(0)
  date            DateTime  @default(now())

  @@index([keywordId])
  @@index([date])
  @@index([position])
  @@index([clicks])
  @@index([impressions])
  @@index([spend])
}

model AdMetrics {
  id              String    @id @default(cuid())
  ad              Ad        @relation(fields: [adId], references: [id])
  adId            String
  impressions     Int       @default(0)
  clicks          Int       @default(0)
  ctr             Float?
  averageCpc      Float?
  spend           Float     @default(0)
  conversions     Int       @default(0)
  date            DateTime  @default(now())

  @@index([adId])
  @@index([date])
  @@index([impressions])
  @@index([clicks])
  @@index([spend])
}

model CampaignMetrics {
  id              String    @id @default(cuid())
  campaign        Campaign  @relation(fields: [campaignId], references: [id])
  campaignId      String
  impressions     Int       @default(0)
  clicks          Int       @default(0)
  ctr             Float?
  averageCpc      Float?
  spend           Float     @default(0)
  conversions     Int       @default(0)
  date            DateTime  @default(now())

  @@index([campaignId])
  @@index([date])
  @@index([impressions])
  @@index([clicks])
  @@index([spend])
}

// Competitor analyse
model Competitor {
  id              String    @id @default(cuid())
  website         Website   @relation(fields: [websiteId], references: [id])
  websiteId       String
  url             String
  name            String
  metrics         CompetitorMetrics[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([websiteId])
  @@index([url])
  @@index([name])
}

model CompetitorMetrics {
  id              String    @id @default(cuid())
  competitor      Competitor @relation(fields: [competitorId], references: [id])
  competitorId    String
  organicKeywords Int?
  paidKeywords    Int?
  estimatedTraffic Int?
  estimatedBudget Float?
  averagePosition Float?
  date            DateTime  @default(now())

  @@index([competitorId])
  @@index([date])
  @@index([organicKeywords])
  @@index([paidKeywords])
  @@index([estimatedTraffic])
  @@index([estimatedBudget])
}

// API integratie
model ApiKey {
  id              String    @id @default(cuid())
  organization    Organization @relation(fields: [orgId], references: [id])
  orgId           String
  provider        ApiProvider
  key             String
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([orgId])
  @@index([provider])
  @@index([isActive])
}

// Enums
enum Role {
  ADMIN
  MANAGER
  USER
}

enum Plan {
  INDIVIDUAL
  PRO
  ADVANCED
  ENTERPRISE
}

enum CampaignType {
  SEO
  SEA
  BOTH
}

enum Status {
  ACTIVE
  PAUSED
  ENDED
}

enum ContentType {
  BLOG_POST
  PRODUCT_DESCRIPTION
  LANDING_PAGE
  META_DESCRIPTION
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum KeywordType {
  BROAD
  PHRASE
  EXACT
  NEGATIVE
}

enum AdType {
  TEXT
  RESPONSIVE
  DISPLAY
}

enum BidStrategy {
  MANUAL_CPC
  TARGET_CPA
  MAXIMIZE_CONVERSIONS
  MAXIMIZE_CLICKS
}

enum ApiProvider {
  GOOGLE_ADS
  SEMRUSH
  AHREFS
  WORDPRESS
  WOOCOMMERCE
  OPENAI
}
